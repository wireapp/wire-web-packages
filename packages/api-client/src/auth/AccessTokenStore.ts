/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */

import logdown from 'logdown';
import {v4 as uuidv4} from 'uuid';

import {EventEmitter} from 'events';

import {LogFactory} from '@wireapp/commons';

import {AccessTokenData} from '../auth/';

enum TOPIC {
  ACCESS_TOKEN_REFRESH = 'AccessTokenStore.TOPIC.ACCESS_TOKEN_REFRESH',
}

export interface AccessTokenStore {
  on(event: TOPIC.ACCESS_TOKEN_REFRESH, listener: (accessToken: AccessTokenData) => void): this;
}

export class AccessTokenStore extends EventEmitter {
  private readonly logger: logdown.Logger;

  public static readonly TOPIC = TOPIC;
  public accessTokenData?: AccessTokenData;
  /**
   * The date at which the token will be invalid. This value should be use with a grain of salt as there might be some time shift between browser and server time
   * It is suggested to add an error margin
   */
  public tokenExpirationDate?: number;

  /**
   * Marker token used when opening a new WebSocket connection.
   * It is used to know we have processed all notifications up to this marker,
   * any notifications received after the marker is returned from websocket
   * are considered live notifications
   * @note This is a random token generated by the client.
   */
  public markerToken?: string;

  constructor() {
    super();

    this.logger = LogFactory.getLogger('@wireapp/api-client/AccessTokenStore');
  }

  public delete = async (): Promise<void> => {
    this.logger.log('Deleting local access token');
    this.accessTokenData = undefined;
    this.tokenExpirationDate = undefined;
    this.markerToken = undefined;
  };

  public updateToken = async (accessToken: AccessTokenData): Promise<AccessTokenData> => {
    if (this.accessTokenData !== accessToken) {
      this.logger.log('Saving local access token');
      this.tokenExpirationDate = Date.now() + accessToken.expires_in * 1000;
      this.accessTokenData = accessToken;
      this.emit(AccessTokenStore.TOPIC.ACCESS_TOKEN_REFRESH, this.accessTokenData);
    }
    return this.accessTokenData;
  };

  public getNextMarkerToken = (): string => {
    const newMarkerToken = uuidv4();
    this.logger.info('Generated new marker token:', newMarkerToken, 'Previous marker token:', this.markerToken);
    this.markerToken = newMarkerToken;
    return this.markerToken;
  };

  public getAccessToken = (): string | undefined => {
    if (this.accessTokenData && this.tokenExpirationDate && this.tokenExpirationDate > Date.now()) {
      return this.accessTokenData.access_token;
    }
    this.logger.warn('Access token is not set or has expired');
    return undefined;
  };
}
