#!/usr/bin/env node

/* eslint-disable no-magic-numbers */

const Changelog = require('generate-changelog');
const {exec} = require('child_process');

const {TravisBot} = require('../dist/');
const scriptName = require('path').basename(process.argv[1]);

const requiredEnvVars = ['WIRE_WEBAPP_BOT_EMAIL', 'WIRE_WEBAPP_BOT_PASSWORD'];
const travisEnvVars = ['TRAVIS_BRANCH', 'TRAVIS_BUILD_NUMBER', 'TRAVIS_COMMIT', 'TRAVIS_REPO_SLUG'];

const envVarUsage = `Required environment variables: ${requiredEnvVars.join(', ')}`;
const usage = `Usage: ${scriptName} <author> <summary>`;

const generateChangelog = config => Changelog.generate(config).then(changelog => {
  const headlines = new RegExp('^#+ (.*)$', 'gm');
  const listItems = new RegExp('^\\* (.*) \\(\\[.*$', 'gm');
  return changelog.replace(headlines, '**$1**').replace(listItems, 'â€“ $1');
})

if (process.argv[2].replace(/-/g, '') === 'help') {
  console.info(usage);
  console.info(envVarUsage);
  process.exit(0);
}

const commitAuthor = process.argv[2];
if (!commitAuthor) {
  console.error('Error: No author for last commit specified.\n');
  console.info(usage);
  process.exit(1);
}

let commitSummary = process.argv[3];
if (!commitSummary) {
  console.error('Error: No summary for last commit specified.\n');
  console.info(usage);
  process.exit(1);
}

if (process.env.TRAVIS_TAG) {
  exec(`git describe --abbrev=0 --tags ${process.env.TRAVIS_TAG}^`, async (err, previousGitTag) => {
    if (!err) {
      commitSummary += '\n\n' + await generateChangelog({
        repoUrl: `https://github.com/${process.env.TRAVIS_REPO_SLUG}`,
        tag: `${previousGitTag}..${process.env.TRAVIS_TAG}`,
      });
    } else {
      console.info('Previous git tag could not be read.');
    }
  });
}

travisEnvVars.forEach(envVar => {
  if (!process.env[envVar]) {
    console.error(`Error: Travis environment variable "${envVar}" is not set.\nRead more: https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables`);
    process.exit(1);
  }
});

requiredEnvVars.forEach(envVar => {
  if (!process.env[envVar]) {
    console.error(`Error: Environment variable "${envVar}" is not set.`);
    console.info(envVarUsage);
    process.exit(1);
  }
});

const login = {
  email: process.env.WIRE_WEBAPP_BOT_EMAIL,
  password: process.env.WIRE_WEBAPP_BOT_PASSWORD,
  persist: false,
};

const commit = {
  author: commitAuthor,
  branch: process.env.TRAVIS_BRANCH,
  hash: process.env.TRAVIS_COMMIT,
  message: commitSummary,
};

const build = {
  repositoryName: process.env.TRAVIS_REPO_SLUG,
  number: process.env.TRAVIS_BUILD_NUMBER,
  url: '',
};

conversationIds =
  process.env.WIRE_WEBAPP_BOT_CONVERSATION_IDS
  ? process.env.WIRE_WEBAPP_BOT_CONVERSATION_IDS.split(',')
  : undefined;

const messageData = {
  build,
  commit,
  conversationIds
};

const bot = new TravisBot(login, messageData);
bot
  .start()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error.message, error.stack);
    process.exit(1);
  });
