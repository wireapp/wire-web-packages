#!/usr/bin/env node
// @ts-check

const {TravisBot} = require('../');
const {exec} = require('child_process');
const {promisify} = require('util');
const {version} = require('../package.json');
const logdown = require('logdown');

const logger = logdown('@wireapp/travis-bot/cli', {
  logger: console,
  markdown: false,
});

const scriptName = require('path').basename(process.argv[1]);

const requiredEnvVars = ['WIRE_WEBAPP_BOT_EMAIL', 'WIRE_WEBAPP_BOT_PASSWORD'];
const travisEnvVars = ['TRAVIS_BRANCH', 'TRAVIS_BUILD_NUMBER', 'TRAVIS_COMMIT', 'TRAVIS_REPO_SLUG'];

/** @param text {string} */
const setBold = text => `\x1b[1m${text}\x1b[0m`;

const usage = () => {
  console.info(`${setBold('Usage:')} ${scriptName} <conversation id(s)>\n`);
  console.info(
    `${setBold('Example:')} ${scriptName} "e4302e84-75fd-4dc7-8a16-67018bd94ce7,44be7db8-7b7c-4acf-887d-86fbb9a5508f"`
  );
};
const envVarUsage = () => console.info(setBold('Required environment variables:'), requiredEnvVars.join(', '));

/** @param command {string} */
const trimmedCommandOutput = async command => {
  const {stderr, stdout} = await promisify(exec)(command);
  if (stderr) {
    throw new Error(`Command error: ${stderr}`);
  }
  return stdout.trim();
};

const start = async () => {
  const {WIRE_WEBAPP_BOT_EMAIL, WIRE_WEBAPP_BOT_PASSWORD, WIRE_WEBAPP_BOT_CONVERSATION_IDS} = process.env;
  const {TRAVIS_BRANCH, TRAVIS_BUILD_NUMBER, TRAVIS_COMMIT, TRAVIS_REPO_SLUG, TRAVIS_TAG} = process.env;

  const commitAuthor = await trimmedCommandOutput(`git log | grep Author: | cut -d' ' -f2- | uniq | head -n1`);
  let commitSummary = await trimmedCommandOutput('git log -1 --pretty=%s');

  if (TRAVIS_TAG) {
    const previousGitTag = await trimmedCommandOutput(`git describe --abbrev=0 --tags ${TRAVIS_TAG}^`);
    const changelog = await TravisBot.generateChangelog(TRAVIS_REPO_SLUG, `${previousGitTag}..${TRAVIS_TAG}`, 800);

    commitSummary += '\n\n' + changelog;
  }

  const loginData = {
    email: WIRE_WEBAPP_BOT_EMAIL,
    password: WIRE_WEBAPP_BOT_PASSWORD,
    persist: false,
  };

  const messageData = {
    build: {
      number: TRAVIS_BUILD_NUMBER,
      repositoryName: TRAVIS_REPO_SLUG,
      url: '',
    },
    commit: {
      author: commitAuthor,
      branch: TRAVIS_BRANCH,
      hash: TRAVIS_COMMIT,
      message: commitSummary,
    },
  };

  if (WIRE_WEBAPP_BOT_CONVERSATION_IDS) {
    messageData.commit.conversationIds = WIRE_WEBAPP_BOT_CONVERSATION_IDS.replace(' ', '').split(',');
  }

  logger.info('Booting up ...');

  const bot = new TravisBot(loginData, messageData);
  await bot.start();

  return bot;
};

logger.info(setBold(`wire-travis-bot v${version}`) + '\n');

switch (process.argv[2]) {
  case '-help':
  case '--help':
  case '-h':
  case '--h': {
    usage();
    envVarUsage();
    process.exit(0);
  }
  default: {
    process.env.WIRE_WEBAPP_BOT_CONVERSATION_IDS = process.argv[2];
  }
}

travisEnvVars.forEach(envVar => {
  if (!process.env[envVar]) {
    console.error(
      `${setBold('Error:')} Travis environment variable "${envVar}" is not set.\n` +
        'Read more: https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables'
    );
    process.exit(1);
  }
});

requiredEnvVars.forEach(envVar => {
  if (!process.env[envVar]) {
    console.error(`Error: Environment variable "${envVar}" is not set.`);
    envVarUsage();
    process.exit(1);
  }
});

(async () => {
  try {
    await start();
    process.exit();
  } catch(error) {
    console.error(error);
    process.exit(1);
  }
});
