#!/usr/bin/env node
// @ts-check

/* eslint-disable no-magic-numbers */

const { exec } = require('child_process');
const { promisify } = require('util');
const { version } = require('../package.json');

const { TravisBot } = require('../dist/');
const scriptName = require('path').basename(process.argv[1]);

const requiredEnvVars = ['WIRE_WEBAPP_BOT_EMAIL', 'WIRE_WEBAPP_BOT_PASSWORD'];
const travisEnvVars = ['TRAVIS_BRANCH', 'TRAVIS_BUILD_NUMBER', 'TRAVIS_COMMIT', 'TRAVIS_REPO_SLUG'];

const envVarUsage = `Required environment variables: ${requiredEnvVars.join(', ')}`;
const usage = `Usage: ${scriptName} <author> <summary>`;

/** @param command {string} */
const trimmedCommandOutput = async command => {
  const { stderr, stdout } = await promisify(exec)(command);
  if (stderr) {
    throw new Error(`Command error: ${stderr}`);
  }
  return stdout.trim();
}

/** @param environment {NodeJS.ProcessEnv} */
const start = async environment => {
  const { WIRE_WEBAPP_BOT_EMAIL, WIRE_WEBAPP_BOT_PASSWORD, WIRE_WEBAPP_BOT_CONVERSATION_IDS } = environment;
  const { TRAVIS_BRANCH, TRAVIS_BUILD_NUMBER, TRAVIS_COMMIT, TRAVIS_REPO_SLUG, TRAVIS_TAG } = environment;

  const commitAuthor = await trimmedCommandOutput(`git log | grep Author: | cut -d' ' -f2- | uniq | head -n1`);
  let commitSummary = await trimmedCommandOutput('git log -1 --pretty=%s');

  if (TRAVIS_TAG) {
    const previousGitTag = await trimmedCommandOutput(`git describe --abbrev=0 --tags ${TRAVIS_TAG}^`);
    const changelog = await TravisBot.generateChangelog(TRAVIS_REPO_SLUG, `${previousGitTag}..${TRAVIS_TAG}`, 800);

    commitSummary += '\n\n' + changelog;
  }

  const loginData = {
    email: WIRE_WEBAPP_BOT_EMAIL,
    password: WIRE_WEBAPP_BOT_PASSWORD,
    persist: false,
  };

  const messageData = {
    build: {
      repositoryName: TRAVIS_REPO_SLUG,
      number: TRAVIS_BUILD_NUMBER,
      url: '',
    },
    commit: {
      author: commitAuthor,
      branch: TRAVIS_BRANCH,
      hash: TRAVIS_COMMIT,
      message: commitSummary,
    },
  };

  if (WIRE_WEBAPP_BOT_CONVERSATION_IDS) {
    messageData.commit.conversationIds = WIRE_WEBAPP_BOT_CONVERSATION_IDS.split(',');
  }

  console.info('Booting up ...')

  const bot = new TravisBot(loginData, messageData);
  await bot.start();

  return bot;
};

console.log('\x1b[1m%s\x1b[0m', `wire-travis-bot v${version}\n`);

if (process.argv[2] && process.argv[2].replace(/-/g, '') === 'help') {
  console.info(usage);
  console.info(envVarUsage);
  process.exit(0);
}

travisEnvVars.forEach(envVar => {
  if (!process.env[envVar]) {
    console.error(`Error: Travis environment variable "${envVar}" is not set.\nRead more: https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables`);
    process.exit(1);
  }
});

requiredEnvVars.forEach(envVar => {
  if (!process.env[envVar]) {
    console.error(`Error: Environment variable "${envVar}" is not set.`);
    console.info(envVarUsage);
    process.exit(1);
  }
});

start(process.env)
  .then(() => process.exit())
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
